{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 8,
			"minor" : 6,
			"revision" : 1,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 34.0, 76.0, 1373.0, 743.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 1,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "",
		"assistshowspatchername" : 0,
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 681.0, 474.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-48",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 188.842103481292725, 450.912294089794159, 305.0, 22.0 ],
					"text" : "param movementSpeed @default 15 @min 0 @max 50"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-44",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 30.701754093170166, 486.842100620269775, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-43",
					"maxclass" : "newobj",
					"numinlets" : 2,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 288.596488475799561, 54.385964393615723, 81.0, 22.0 ],
					"text" : "scale 0 1 -1 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-42",
					"maxclass" : "newobj",
					"numinlets" : 2,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 288.596488475799561, 80.409999999999997, 119.0, 22.0 ],
					"text" : "lookup fricativeNoise"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-41",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 288.596488475799561, 25.438596248626709, 65.0, 22.0 ],
					"text" : "phasor 0.5"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-40",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 130.70175313949585, 61.403508186340332, 114.0, 22.0 ],
					"text" : "buffer fricativeNoise"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-39",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 647.368414878845215, 14.0, 28.0, 22.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-37",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 917.539999999999964, 581.580000000000041, 167.0, 22.0 ],
					"text" : "data noseJunctionOutputR 29"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-36",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 931.580000000000041, 522.809999999999945, 165.0, 22.0 ],
					"text" : "data noseJunctionOutputL 29"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-35",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 782.460000000000036, 368.420000000000016, 87.0, 22.0 ],
					"text" : "data noseR 28"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-34",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 771.049999999999955, 335.95999999999998, 84.0, 22.0 ],
					"text" : "data noseL 28"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-33",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 749.999992847442627, 295.333342850208282, 135.0, 22.0 ],
					"text" : "data junctionOutputL 45"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-32",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 780.700000000000045, 271.050000000000011, 138.0, 22.0 ],
					"text" : "data junctionOutputR 45"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-30",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 784.210000000000036, 215.789999999999992, 58.0, 22.0 ],
					"text" : "data L 44"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-29",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 792.110000000000014, 191.22999999999999, 61.0, 22.0 ],
					"text" : "data R 44"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-28",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 926.32000000000005, 267.54000000000002, 104.0, 22.0 ],
					"text" : "data transients 44"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-23",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 186.842103481292725, 426.912294089794159, 309.0, 22.0 ],
					"text" : "param velumTarget @default 0.01 @min 0.01 @max 0.4"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-22",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 916.669999999999959, 475.329999999999984, 131.0, 22.0 ],
					"text" : "data noseReflection 29"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-19",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 900.000026822090149, 438.000013053417206, 85.0, 22.0 ],
					"text" : "data noseA 28"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-18",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 900.0, 392.0, 145.0, 22.0 ],
					"text" : "data newReflectionLRN 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-17",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 900.0, 368.0, 118.0, 22.0 ],
					"text" : "data reflectionLRN 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-16",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 893.097582280635834, 295.333342850208282, 101.0, 22.0 ],
					"text" : "data reflection 45"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-15",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 893.097582280635834, 319.333342850208282, 127.0, 22.0 ],
					"text" : "data newReflection 45"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-14",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 894.0, 227.963419497013092, 59.0, 22.0 ],
					"text" : "data A 44"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-13",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 1029.0, 172.0, 117.0, 22.0 ],
					"text" : "buffer noseDiameter"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-12",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 1029.0, 148.0, 111.0, 22.0 ],
					"text" : "buffer restDiameter"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-11",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 1029.0, 124.0, 122.0, 22.0 ],
					"text" : "buffer targetDiameter"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-10",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 1029.0, 100.0, 89.0, 22.0 ],
					"text" : "buffer diameter"
				}

			}
, 			{
				"box" : 				{
					"code" : "moveTowards(current, target, amountUp, amountDown) {\r\n    if (current < target) {\r\n\t\treturn min(current + amountUp, target);\r\n\t}\r\n    else {\r\n\t\treturn max(current-amountDown, target);\r\n\t}\r\n}\r\n\r\nHistory oldN(0);\r\nHistory sampCount(0);\r\nHistory lastObstruction(-1);\r\n\r\nHistory num(0);\r\n\r\nblockLength = 512;\r\n\r\nglottalOutput = in1;\r\nturbulenceNoise = in2;\r\nnoiseModulator = in3;\r\n\r\nbladeStart = floor(10 * n/44);\r\ntipStart = floor(32 * n/44);\r\nlipStart = floor(39 * n/44);\r\nnoseLength = floor(28 * n/44);\r\nnoseStart = n - noseLength + 1; \r\n\r\n//init() (only when N changes)\r\nif (oldN != n) {\r\n\toldN = n;\r\n\tfor (i = 0; i < n; i += 1) {\r\n    \td = 0;\r\n    \tif (i < 7 * n / 44-0.5) d = 0.6;\r\n    \telse if (i < 12 * n / 44) d = 1.1;\r\n    \telse d = 1.5;\r\n\r\n\t\tdiameter.poke(d, i); //do this??\r\n\t\ttargetDiameter.poke(d, i);\r\n\t\trestDiameter.poke(d, i);\r\n\t}\r\n\r\n\tfor (i = 0; i < noseLength; i += 1) {\r\n    \tdia = 0;\r\n    \td = 2 * (i / noseLength);\r\n    \tif (d < 1) dia = 0.4 + 1.6 * d;\r\n\t\telse dia = 0.5 + 1.5 * (2 - d);\r\n    \tdia = min(dia, 1.9);\r\n    \tnoseDiameter.poke(dia, i);\r\n\t}   \r\n\t\r\n\tfor (i = 0; i < 3; i+= 1) {\r\n\t\tnewReflectionLRN.poke(0, i);\r\n\t}\r\n\r\n\t//calculateReflections\r\n\t\r\n\tfor (i = 0; i < n; i += 1) {\r\n\t\tA.poke(diameter.peek(i) * diameter.peek(i), i);\r\n\t}\r\n\t\r\n\tfor (i = 1; i < n; i += 1)\r\n    {\r\n        //this.reflection[i] = this.newReflection[i];\r\n\t\treflection.poke(newReflection.peek(i), i);\r\n\t\t\r\n        //if (this.A[i] == 0) this.newReflection[i] = 0.999; //to prevent some bad behaviour if 0\r\n        //else this.newReflection[i] = (this.A[i-1]-this.A[i]) / (this.A[i-1]+this.A[i]); \r\n\t\tif (A.peek(i) == 0) newReflection.poke(0.999, i);\r\n\t\telse newReflection.poke(( A.peek(i-1) - A.peek(i) ) / ( A.peek(i-1) + A.peek(i) ), i);\r\n    }\r\n\r\n\treflectionLRN.poke(newReflectionLRN.peek(0), 0);\r\n\treflectionLRN.poke(newReflectionLRN.peek(1), 1);\r\n\treflectionLRN.poke(newReflectionLRN.peek(2), 2);\r\n\t\r\n\t//var sum = this.A[this.noseStart]+this.A[this.noseStart+1]+this.noseA[0];\t\r\n\tsum = A.peek(noseStart) + A.peek(noseStart + 1) + noseA.peek(0);\r\n\t\r\n\t\r\n    //this.newReflectionLeft = (2*this.A[this.noseStart]-sum)/sum;\r\n\tnewReflectionLRN.poke((2 * A.peek(noseStart) - sum) / sum, 0);\r\n\r\n    //this.newReflectionRight = (2*this.A[this.noseStart+1]-sum)/sum;   \r\n\tnewReflectionLRN.poke((2 * A.peek(noseStart + 1) - sum) / sum, 1);\r\n\r\n    //this.newReflectionNose = (2*this.noseA[0]-sum)/sum;    \r\n\tnewReflectionLRN.poke((2 * noseA.peek(0) - sum) / sum, 2);\r\n\t\r\n\t//calculateNoseReflections\r\n\t\r\n\tfor (i = 0; i < noseLength; i += 1) {\r\n\t\t// this.noseA[i] = this.noseDiameter[i]*this.noseDiameter[i]; \r\n\t\tnoseA.poke(noseDiameter.peek(i) * noseDiameter.peek(i), i);\r\n\t}\r\n\tfor (i = 1; i < noseLength; i += 1) {\r\n\t\t//this.noseReflection[i] = (this.noseA[i-1]-this.noseA[i]) / (this.noseA[i-1]+this.noseA[i]); \r\n\t\tnoseReflection.poke(( noseA.peek(i-1) - noseA.peek(i) ) / ( noseA.peek(i-1) + noseA.peek(i) ), i);\r\n\t}\r\n\t\r\n\tnoseDiameter.poke(velumTarget, 0);\t\r\n\t\r\n}\r\n\r\n//runStep (happens twice, once with lambda 0 and once with lambda 0.5)\r\n//\tthis is because blockLength is effectively 1\r\n\r\nvocalOutput = 0;\r\n\r\nfor (lambda = 0; lambda <= 0.5; lambda += 0.5) {\r\n\t\r\n\t//processTransients()\r\n\t//transients buffer sample indexes are tract diameter indexes\r\n\t//sample values are remaining time (if any) of transient at that index\r\n\t//(current time alive = lifetime - sample value)\r\n\tfor (i = 0; i < n; i+= 1) {\r\n\t\tval = transients.peek(i);\r\n\t\tif (transients.peek(i) > 0) {\r\n\t\t\tamplitude = 0.3 * pow(2, -200 * (0.2 - val));\r\n\t\t\tR.poke(R.peek(i) + amplitude/2, i);\r\n\t\t\tL.poke(L.peek(i) + amplitude/2, i);\r\n\t\t\ttransients.poke(transients.peek(i) - 1.0/(samplerate*2), i);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//addTurbulenceNoise replacement\r\n\t//since there's no UI, get index/diameter of constriction using\r\n\t//locations/heights of \"valleys\" in diameter values\r\n\tfor (i = 1; i < (n - 1); i+= 1) {\r\n\t\td = diameter.peek(i);\r\n\t\tif (d < diameter.peek(i-1) && d < diameter.peek(i+1) && d > 0 &&\r\n\t\t\trestDiameter.peek(i) != targetDiameter.peek(i)) {\r\n\t\t\t\t\r\n\t\t\td += 0.3; //offset diameter a bit to get \"touch\" diameter\r\n\t\t\t\r\n\t\t\t//\"addTurbulenceNoiseAtIndex()\"\r\n\t\t\t//index = i; diameter = d, intensity = 1 (reevaluate?)\r\n\t\t\t//1119\r\n\t\t\tnoise = 0.66 * turbulenceNoise * noiseModulator;\r\n\t\t\t\r\n\t\t\tthinness0 = clamp(8 * (0.7 - d), 0, 1);\r\n\t\t\topenness = clamp(30 * (d - 0.3), 0, 1);\r\n\t\t\tnoise0 = noise * thinness0 * openness;\r\n\t\t\t//no noise1 because delta is always 0\r\n\t\t\t\r\n\t\t\tR.poke(R.peek(i+1) + noise0/2, i+1);\r\n\t\t\tL.poke(L.peek(i+1) + noise0/2, i+1);\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t//1000 this.junctionOutputR[0] = this.L[0] * this.glottalReflection + glottalOutput;\r\n\tjunctionOutputR.poke(L.peek(0) * 0.75 + glottalOutput, 0);\r\n\r\n\t//1001 this.junctionOutputL[this.n] = this.R[this.n-1] * this.lipReflection; \r\n\tjunctionOutputL.poke(R.peek(n-1) * -0.85, n);\r\n\r\n\tfor (i = 1; i < n; i += 1) { //1003\r\n\t\r\n\t\t//1005 var r = this.reflection[i] * (1-lambda) + this.newReflection[i]*lambda;\r\n\t\tr = reflection.peek(i) * (1-lambda) + newReflection.peek(i) * lambda;\r\n\t\r\n\t\t//1006 var w = r * (this.R[i-1] + this.L[i]);\r\n\t\tw = r * (R.peek(i-1) + L.peek(i));\r\n\t\r\n\t\t//1007 this.junctionOutputR[i] = this.R[i-1] - w;\r\n\t\tjunctionOutputR.poke(R.peek(i-1) - w, i);\r\n\t\r\n\t\t//1008 this.junctionOutputL[i] = this.L[i] + w;\r\n\t\tjunctionOutputL.poke(L.peek(i) + w, i);\r\n\t}\r\n\r\n\ti = noseStart;\r\n\r\n\t//1013 var r = this.newReflectionLeft * (1-lambda) + this.reflectionLeft*lambda;\r\n\tr = newReflectionLRN.peek(0) * (1-lambda) + reflectionLRN.peek(0) * lambda;\r\n\r\n\t//1014 this.junctionOutputL[i] = r*this.R[i-1]+(1+r)*(this.noseL[0]+this.L[i]);\r\n\tjunctionOutputL.poke(r * R.peek(i-1) + (1+r) * (noseL.peek(0) + L.peek(i)), i);\r\n\r\n\t//1015 r = this.newReflectionRight * (1-lambda) + this.reflectionRight*lambda;\r\n\tr = newReflectionLRN.peek(1) * (1-lambda) + reflectionLRN.peek(1) * lambda;\r\n\r\n\t//1016 this.junctionOutputR[i] = r*this.L[i]+(1+r)*(this.R[i-1]+this.noseL[0]);     \r\n\tjunctionOutputR.poke(r * L.peek(i) + (1+r) * (R.peek(i-1) + noseL.peek(0)), i);\r\n\r\n\t//1017 r = this.newReflectionNose * (1-lambda) + this.reflectionNose*lambda;\r\n\tr = newReflectionLRN.peek(2) * (1-lambda) + reflectionLRN.peek(2) * lambda;\r\n\r\n\t//1018 this.noseJunctionOutputR[0] = r*this.noseL[0]+(1+r)*(this.L[i]+this.R[i-1]);\r\n\tnoseJunctionOutputR.poke(r * noseL.peek(0) + (1+r) * (L.peek(i) + R.peek(i-1)), 0);\r\n\r\n\tfor (i = 0; i < n; i += 1) { //1019\r\n\t\r\n\t\t//1021 this.R[i] = this.junctionOutputR[i]*0.999;\r\n\t\tR.poke(junctionOutputR.peek(i) * 0.999, i);\r\n\t\r\n    \t//1022 this.L[i] = this.junctionOutputL[i+1]*0.999; \r\n\t\tL.poke(junctionOutputL.peek(i+1) * 0.999, i);\r\n\t}\r\n\t\r\n\tvocalOutput += R.peek(n - 1);\r\n\r\n\r\n\t//1039 this.noseJunctionOutputL[this.noseLength] = this.noseR[this.noseLength-1] * this.lipReflection; \r\n\tnoseJunctionOutputL.poke(noseR.peek(noseLength - 1) * -0.85, noseLength);\r\n\r\n\tfor (i = 1; i < noseLength; i += 1) {\r\n\t\t//1043 var w = this.noseReflection[i] * (this.noseR[i-1] + this.noseL[i]);\r\n\t\tw = noseReflection.peek(i) * (noseR.peek(i-1) + noseL.peek(i));\r\n\t\r\n\t\t//1044 this.noseJunctionOutputR[i] = this.noseR[i-1] - w;\r\n\t\tnoseJunctionOutputR.poke(noseR.peek(i-1) - w, i);\r\n\t\r\n\t\t//1045 this.noseJunctionOutputL[i] = this.noseL[i] + w;\r\n\t\tnoseJunctionOutputL.poke(noseL.peek(i) + w, i);\r\n\t}\r\n\r\n\tfor (i = 0; i < noseLength; i += 1) {\r\n\t\r\n\t\t//1050 this.noseR[i] = this.noseJunctionOutputR[i] * this.fade; \r\n\t\tnoseR.poke(noseJunctionOutputR.peek(i), i);\r\n\t\r\n\t\t//1051 this.noseL[i] = this.noseJunctionOutputL[i+1] * this.fade;   \r\n\t\tnoseL.poke(noseJunctionOutputL.peek(i+1), i);\t\r\n\t}\r\n\r\n\tvocalOutput += noseR.peek(noseLength-1);\r\n\t\t\r\n}\r\n\r\nout1 = vocalOutput / 8;\r\n\r\nsampCount = sampCount + 1;\r\n\r\n//finishBlock\r\nif (sampCount % blockLength == 0) {\r\n\t\r\n\tnum = num + 1;\r\n\t\r\n\t//reshapeTract\r\n\t\r\n\t//var amount = blockLength/AudioSystem.get(\"sampleRate\") * tractParams.get(\"movementSpeed\");\r\n\tamount = blockLength / samplerate * movementSpeed;\r\n\tnewLastObstruction = -1;\r\n\t\r\n\tfor (i = 0; i < n; i += 1) {\r\n\t\td = diameter.peek(i);\r\n\t\ttd = targetDiameter.peek(i);\r\n\t\tif (d <= 0) newLastObstruction = i;\r\n\t\tslowReturn = 0;\r\n\t\tif (i < noseStart) slowReturn = 0.6;\r\n\t\telse if (i >= tipStart) slowReturn = 1.0; \r\n\t\telse slowReturn = 0.6 + 0.4*(i-noseStart) / (tipStart-noseStart);\r\n\t\t\r\n\t\tnewVal = moveTowards(d, td, slowReturn*amount, 2*amount);\t\t\r\n\t\tdiameter.poke(newVal, i);\r\n\t}\r\n\t\r\n\tif (lastObstruction > -1 && newLastObstruction == -1 && noseA.peek(0) < 0.05) {\r\n\t\ttransients.poke(.2, lastObstruction);\r\n\t}\r\n\tlastObstruction = newLastObstruction;\r\n\t\t\r\n\tnoseDiameter.poke(moveTowards(noseDiameter.peek(0), velumTarget, \r\n        amount*0.25, amount*0.1), 0);\r\n\tnoseA.poke(pow(noseDiameter.peek(0), 2), 0); \r\n\t\r\n\t\r\n\t//calculatereflections\r\n\t\r\n\tfor (i = 0; i < n; i+= 1) {\r\n\t\tA.poke(diameter.peek(i) * diameter.peek(i), i);\r\n\t}\r\n\t\r\n\tfor (i = 1; i < n; i += 1)\r\n    {\r\n        //this.reflection[i] = this.newReflection[i];\r\n\t\treflection.poke(newReflection.peek(i), i);\r\n\t\t\r\n        //if (this.A[i] == 0) this.newReflection[i] = 0.999; //to prevent some bad behaviour if 0\r\n        //else this.newReflection[i] = (this.A[i-1]-this.A[i]) / (this.A[i-1]+this.A[i]); \r\n\t\tif (A.peek(i) == 0) newReflection.poke(0.999, i);\r\n\t\telse newReflection.poke(( A.peek(i-1) - A.peek(i) ) / ( A.peek(i-1) + A.peek(i) ), i);\r\n    }\r\n\r\n\treflectionLRN.poke(newReflectionLRN.peek(0), 0);\r\n\treflectionLRN.poke(newReflectionLRN.peek(1), 1);\r\n\treflectionLRN.poke(newReflectionLRN.peek(2), 2);\r\n\t\r\n\t//var sum = this.A[this.noseStart]+this.A[this.noseStart+1]+this.noseA[0];\t\r\n\tsum = A.peek(noseStart) + A.peek(noseStart + 1) + noseA.peek(0);\r\n\t\r\n\t\r\n    //this.newReflectionLeft = (2*this.A[this.noseStart]-sum)/sum;\r\n\tnewReflectionLRN.poke((2 * A.peek(noseStart) - sum) / sum, 0);\r\n\r\n    //this.newReflectionRight = (2*this.A[this.noseStart+1]-sum)/sum;   \r\n\tnewReflectionLRN.poke((2 * A.peek(noseStart + 1) - sum) / sum, 1);\r\n\r\n    //this.newReflectionNose = (2*this.noseA[0]-sum)/sum;    \r\n\tnewReflectionLRN.poke((2 * noseA.peek(0) - sum) / sum, 2);\r\n}\r\n\r\nout2 = num;",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-9",
					"maxclass" : "codebox",
					"numinlets" : 3,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 30.927836894989014, 112.371140718460083, 688.659834861755371, 274.226820468902588 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 186.842103481292725, 402.912294089794159, 227.0, 22.0 ],
					"text" : "param n @default 44 @min 30 @max 44"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 2 ],
					"source" : [ "obj-39", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-43", 0 ],
					"source" : [ "obj-41", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 1 ],
					"source" : [ "obj-42", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-42", 0 ],
					"source" : [ "obj-43", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-2", 0 ],
					"source" : [ "obj-9", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-44", 0 ],
					"source" : [ "obj-9", 0 ]
				}

			}
 ]
	}

}
